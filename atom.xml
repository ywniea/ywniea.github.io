<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ywinea&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-11-27T06:47:18.416Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Weiyan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React lifecycle</title>
    <link href="http://yoursite.com/2018/03/20/React%20lifecycle/"/>
    <id>http://yoursite.com/2018/03/20/React%20lifecycle/</id>
    <published>2018-03-20T12:24:56.000Z</published>
    <updated>2019-11-27T06:47:18.416Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Constructor"><a href="#Constructor" class="headerlink" title="Constructor"></a>Constructor</h3><ul><li>当一个class继承任何其他的有constructor的class的时候，在最初的要调用super() super会调用父类的constructor并且做一些初始化的工作。</li><li>这也就是为什么我们只有在调用了super之后才能使用<code>this.props</code></li><li>初始化this.state based on props received、this.xxx</li><li>不要使用 AJAX call等<a id="more"></a>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="comment">// after that </span></span><br><span class="line">    <span class="keyword">this</span>.props.property1...</span><br><span class="line">    <span class="comment">// on all other place use this.setState(&#123;&#125;);</span></span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Deprecated-ComponentWillMount"><a href="#Deprecated-ComponentWillMount" class="headerlink" title="Deprecated-ComponentWillMount"></a>Deprecated-ComponentWillMount</h3><p>在新的react版本中这个函数被废弃了，尽量避免使用。</p><p>题外话：dispatch() 和connect()方法会触发setState()函数的调用。 有人在constructor中调用了某些函数导致路由变化，最终connect(UsersComponent)中的dispatch导致了setState()的调用。</p><p>Q: The question is, regarding the sample app I posted, what are the two components in question? You said a dispatch() in one component triggers a setState() in another component. In my example, is that App and Users?<br>A: A route change caused dispatch which caused mounting Users which caused another dispatch in its the constructor. So, dispatch inside connect(Users) caused a setState inside connect(App).<br>Q: And why did dispatch() in one component cause a setState() in another? Is that due to a bad coding pattern, or something internal to React?<br>A: Any time you call dispatch(), all connect()-ed component wrappers have their setState() called so that the connected component receive that new state as their props. It’s just how React Redux works.</p><p>但是讲清楚：</p><ul><li>可以使用this.setState()但是尽量将state的赋值放在constructor中。</li><li>即使是想要调用AJAX或者其他获取数据的方法以达到在最初的render之前就拿到数据的效果，但仍然不能保证数据到达时间可以在最初的render之前。</li><li>而且这个方法可能在最初的render之前调用多次，这个将导致副作用。因此应避免使用AJAX等会导致副作用的方法。</li></ul><h3 id="Deprecated-ComponentWillReceiveProps-nextProps"><a href="#Deprecated-ComponentWillReceiveProps-nextProps" class="headerlink" title="Deprecated-ComponentWillReceiveProps(nextProps)"></a>Deprecated-ComponentWillReceiveProps(nextProps)</h3><ul><li><p>这个方法会在props改变的时候，在每一次update的生命周期中被调用，传进来下一个props的object，包括了props中所有的值，不管这个object中的值有没有被修改。</p></li><li><p>当有state需要根据parent传进来的props进行设置的时候，在这里调用stateState。</p></li><li><p>这个方法在render在掉用之前可能会被调用多次，因此一些有副作用的动作不要在这里调用。例如ajax。</p></li><li><p>使用时记得进行检查某个值是否存在变化。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">componentWillReceiveProps(nextProps) &#123;</span><br><span class="line">  <span class="keyword">if</span>(nextProps.myProp !== <span class="keyword">this</span>.props.myProps) &#123;</span><br><span class="line">    <span class="comment">// nextProps.myProp has a different value than our current prop</span></span><br><span class="line">    <span class="comment">// so we can perform some calculations based on the new value</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="ShouldComponentUpdate-nextProps-nextState-nextContext"><a href="#ShouldComponentUpdate-nextProps-nextState-nextContext" class="headerlink" title="ShouldComponentUpdate(nextProps, nextState, nextContext)"></a>ShouldComponentUpdate(nextProps, nextState, nextContext)</h3><ul><li>如上，接受这三个参数，在update的生命周期中被调用。返回false会阻止re-render，默认返回true。</li><li>用于提升组件性能</li><li>不要调用setState和有副作有的方法入AJAX</li></ul><h3 id="Deprecated-—-ComponentWillUpdate-nextProps-nextState"><a href="#Deprecated-—-ComponentWillUpdate-nextProps-nextState" class="headerlink" title="Deprecated — ComponentWillUpdate(nextProps, nextState)"></a>Deprecated — ComponentWillUpdate(nextProps, nextState)</h3><ul><li>shouldComponentUpdate如果返回true或者是没有被用户实现，进入update的生命周期。这个方法才会被调用。</li><li>用于同步props和state。当state是基于props进行设置的时候，这个方法是best choice。因此如果有需要，建议在这里调用setState。</li><li>同其他的componentWill 的方法一样，这个方法会在render之前被调用多次，因此还是不要进行一些有副作用的方法的调用。如AJAX。</li></ul><h3 id="Render渲染"><a href="#Render渲染" class="headerlink" title="Render渲染"></a>Render渲染</h3><p>render a component</p><h3 id="ComponentDidUpdate-prevProps-prevState-prevContext"><a href="#ComponentDidUpdate-prevProps-prevState-prevContext" class="headerlink" title="ComponentDidUpdate(prevProps, prevState, prevContext)"></a>ComponentDidUpdate(prevProps, prevState, prevContext)</h3><ul><li><p>当一个component渲染之后被调用。在这个方法执行到的时候，可以保证当前组件以及其子组件也全部被渲染完了。</p></li><li><p>由于这个方法可以保证在re-render的生命周期中只调用一次，所以一些有副作用的操作在最好这里被调用。例如ajax。在使用之前最好手动进行比较是否需要进行操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">componentDidUpdate(prevProps) &#123;</span><br><span class="line">  <span class="keyword">if</span>(prevProps.myProps !== <span class="keyword">this</span>.props.myProp) &#123;</span><br><span class="line">    <span class="comment">// this.props.myProp has a different value</span></span><br><span class="line">    <span class="comment">// we can perform any operations that would </span></span><br><span class="line">    <span class="comment">// need the new value and/or cause side-effects </span></span><br><span class="line">    <span class="comment">// like AJAX calls with the new value - this.props.myProp</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>因为这个方法在render之后，所以不要进行setState操作，不然会死循环。会触发新一轮的render。</p></li><li><p>一个例外。当一个component被渲染了之后，他的一些DOM的属性仅能被计算一次，这种情况下可以来修改state。注意要进行手动验证。</p></li></ul><h3 id="ComponentDidCatch-errorString-errorInfo"><a href="#ComponentDidCatch-errorString-errorInfo" class="headerlink" title="ComponentDidCatch(errorString, errorInfo)"></a>ComponentDidCatch(errorString, errorInfo)</h3><ul><li><p>react16新加的生命周期方法。他作用于子组件的uncaught error。 </p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">componentDidCatch(errorString, errorInfo) &#123;</span><br><span class="line">  <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">    error: errorString</span><br><span class="line">  &#125;);</span><br><span class="line">  ErrorLoggingTool.log(errorInfo);</span><br><span class="line">&#125;</span><br><span class="line">render() &#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.state.error) <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">ShowErrorMessage</span> <span class="attr">error</span>=<span class="string">&#123;this.state.error&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  return (</span></span><br><span class="line"><span class="xml">    // render normal component output</span></span><br><span class="line"><span class="xml">  );</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>errorString: error.toString()</p></li><li><p>errorInfo: 一个object 形如 <code>{componentStack: ...}</code></p></li></ul><h3 id="ComponentDidMount"><a href="#ComponentDidMount" class="headerlink" title="ComponentDidMount"></a>ComponentDidMount</h3><ul><li>在整个生命周期中只会被调用一次。他被调用的时候证明当前组件及其子组件都已经被渲染完成。</li><li>在一次生命周期中，因为不会被重复调用好多次，非常建议用于调用任何会导致副作用的函数，例如ajax</li><li>不要调用setState，会导致死循环。</li><li>一个例外。当一个component被渲染了之后，他的一些DOM的属性仅能被计算一次，这种情况下可以来修改state。</li></ul><h3 id="ComponentWillUnmount"><a href="#ComponentWillUnmount" class="headerlink" title="ComponentWillUnmount"></a>ComponentWillUnmount</h3><ul><li>清除一些不再需要的东西，例如setTimeout, setInterval, some listeners<a href="media/15737146153227/React%20lifecycle.md">React lifecycle</a></li><li>不要调用setState</li></ul><h3 id="Component-cycles"><a href="#Component-cycles" class="headerlink" title="Component cycles"></a>Component cycles</h3><ul><li>component creation</li></ul><p><img src="/media/15740513820273.jpg" alt=""></p><ul><li>Component re-rendering due to re-rendering of the parent component<br><img src="/media/15740514478209.jpg" alt=""></li><li>Component re-rendering due to internal change (e.g. a call to this.setState())<br><img src="/media/15740514981665.jpg" alt=""></li><li>Component re-rendering due to call to this.forceUpdate</li></ul><p><img src="/media/15740515279013.jpg" alt=""></p><ul><li>Component re-rendering due to catching an error</li></ul><p><code>ErrorBoundaries</code> 一个组件可以定义一个特殊层用于处理错误并提供了一个新的生命周期方法<code>componentDidCatch</code>这个方法在发生错误的时候让我们能够更加优雅的处理错误和修复组件。<br><img src="/media/15740517773124.jpg" alt=""></p><p>Understanding React — Component life-cycle: <a href="https://medium.com/@baphemot/understanding-reactjs-component-life-cycle-823a640b3e8d" target="_blank" rel="noopener">https://medium.com/@baphemot/understanding-reactjs-component-life-cycle-823a640b3e8d</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Constructor&quot;&gt;&lt;a href=&quot;#Constructor&quot; class=&quot;headerlink&quot; title=&quot;Constructor&quot;&gt;&lt;/a&gt;Constructor&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;当一个class继承任何其他的有constructor的class的时候，在最初的要调用super() super会调用父类的constructor并且做一些初始化的工作。&lt;/li&gt;
&lt;li&gt;这也就是为什么我们只有在调用了super之后才能使用&lt;code&gt;this.props&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;初始化this.state based on props received、this.xxx&lt;/li&gt;
&lt;li&gt;不要使用 AJAX call等
    
    </summary>
    
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="React lifecycle" scheme="http://yoursite.com/tags/React-lifecycle/"/>
    
  </entry>
  
  <entry>
    <title>Hexo &amp; Github Pages &amp; bash</title>
    <link href="http://yoursite.com/2018/01/29/Hexo%20&amp;%20Github%20Pages%20&amp;%20bash/"/>
    <id>http://yoursite.com/2018/01/29/Hexo%20&amp;%20Github%20Pages%20&amp;%20bash/</id>
    <published>2018-01-29T10:02:50.000Z</published>
    <updated>2019-11-27T06:46:27.250Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Common-commands-memo"><a href="#Common-commands-memo" class="headerlink" title="Common commands memo"></a>Common commands memo</h3><p>Update.</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// some kinds of permission denied</span><br><span class="line">sudo chown -R ownerName: /usr/<span class="built_in">local</span>/lib/node_modules</span><br><span class="line"></span><br><span class="line">// use a taobao registry instead the official one</span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line">cnpm install hexo-renderer-scss --save</span><br></pre></td></tr></table></figure><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install hexo-cli -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建hexo文件夹</span></span><br><span class="line">$ mkdir hexo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入hexo文件夹</span></span><br><span class="line">$ <span class="built_in">cd</span> hexo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化hexo</span></span><br><span class="line">$ hexo init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖包</span></span><br><span class="line">$ npm install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地查看</span></span><br><span class="line"><span class="comment"># 先运行下面的命令，再在浏览器输入localhost:4000即可</span></span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><h3 id="生成静态网站"><a href="#生成静态网站" class="headerlink" title="生成静态网站"></a>生成静态网站</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><h3 id="目录配置"><a href="#目录配置" class="headerlink" title="目录配置"></a>目录配置</h3><p>配置文件的冒号“:”后面有一个空格</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── .deploy <span class="comment">#需要部署的文件</span></span><br><span class="line">├── node_modules <span class="comment">#Hexo插件</span></span><br><span class="line">├── public <span class="comment">#生成的静态网页文件</span></span><br><span class="line">├── scaffolds <span class="comment">#模板</span></span><br><span class="line">├── <span class="built_in">source</span> <span class="comment">#博客正文和其他源文件，404、favicon、CNAME 都应该放在这里</span></span><br><span class="line">| ├── _drafts <span class="comment">#草稿</span></span><br><span class="line">| └── _posts <span class="comment">#文章</span></span><br><span class="line">├── themes <span class="comment">#主题</span></span><br><span class="line">├── _config.yml <span class="comment">#全局配置文件</span></span><br><span class="line">└── package.json</span><br></pre></td></tr></table></figure><h3 id="全局配置-config-yml"><a href="#全局配置-config-yml" class="headerlink" title="全局配置 _config.yml"></a>全局配置 _config.yml</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: http://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"><span class="comment"># Site #站点信息</span></span><br><span class="line">title:  <span class="comment">#标题</span></span><br><span class="line">subtitle:  <span class="comment">#副标题</span></span><br><span class="line">description:  <span class="comment">#站点描述，给搜索引擎看的</span></span><br><span class="line">author:  <span class="comment">#作者</span></span><br><span class="line">email:  <span class="comment">#电子邮箱</span></span><br><span class="line">language: zh-CN <span class="comment">#语言</span></span><br><span class="line"><span class="comment"># URL #链接格式</span></span><br><span class="line">url:  <span class="comment">#网址</span></span><br><span class="line">root: / <span class="comment">#根目录</span></span><br><span class="line">permalink: :year/:month/:day/:title/ <span class="comment">#文章的链接格式</span></span><br><span class="line">tag_dir: tags <span class="comment">#标签目录</span></span><br><span class="line">archive_dir: archives <span class="comment">#存档目录</span></span><br><span class="line">category_dir: categories <span class="comment">#分类目录</span></span><br><span class="line">code_dir: downloads/code</span><br><span class="line">permalink_defaults:</span><br><span class="line"><span class="comment"># Directory #目录</span></span><br><span class="line">source_dir: <span class="built_in">source</span> <span class="comment">#源文件目录</span></span><br><span class="line">public_dir: public <span class="comment">#生成的网页文件目录</span></span><br><span class="line"><span class="comment"># Writing #写作</span></span><br><span class="line">new_post_name: :title.md <span class="comment">#新文章标题</span></span><br><span class="line">default_layout: post <span class="comment">#默认的模板，包括 post、page、photo、draft（文章、页面、照片、草稿）</span></span><br><span class="line">titlecase: <span class="literal">false</span> <span class="comment">#标题转换成大写</span></span><br><span class="line">external_link: <span class="literal">true</span> <span class="comment">#在新选项卡中打开连接</span></span><br><span class="line">filename_case: 0</span><br><span class="line">render_drafts: <span class="literal">false</span></span><br><span class="line">post_asset_folder: <span class="literal">false</span></span><br><span class="line">relative_link: <span class="literal">false</span></span><br><span class="line">highlight: <span class="comment">#语法高亮</span></span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span> <span class="comment">#是否启用</span></span><br><span class="line">  line_number: <span class="literal">true</span> <span class="comment">#显示行号</span></span><br><span class="line">  tab_replace:</span><br><span class="line"><span class="comment"># Category &amp; Tag #分类和标签</span></span><br><span class="line">default_category: uncategorized <span class="comment">#默认分类</span></span><br><span class="line">category_map:</span><br><span class="line">tag_map:</span><br><span class="line"><span class="comment"># Archives</span></span><br><span class="line">2: 开启分页</span><br><span class="line">1: 禁用分页</span><br><span class="line">0: 全部禁用</span><br><span class="line">archive: 2</span><br><span class="line">category: 2</span><br><span class="line">tag: 2</span><br><span class="line"><span class="comment"># Server #本地服务器</span></span><br><span class="line">port: 4000 <span class="comment">#端口号</span></span><br><span class="line">server_ip: localhost <span class="comment">#IP 地址</span></span><br><span class="line">logger: <span class="literal">false</span></span><br><span class="line">logger_format: dev</span><br><span class="line"><span class="comment"># Date / Time format #日期时间格式</span></span><br><span class="line">date_format: YYYY-MM-DD <span class="comment">#参考http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line">time_format: H:mm:ss</span><br><span class="line"><span class="comment"># Pagination #分页</span></span><br><span class="line">per_page: 10 <span class="comment">#每页文章数，设置成 0 禁用分页</span></span><br><span class="line">pagination_dir: page</span><br><span class="line"><span class="comment"># Disqus #Disqus评论，替换为多说</span></span><br><span class="line">disqus_shortname:</span><br><span class="line"><span class="comment"># Extensions #拓展插件</span></span><br><span class="line">theme: landscape-plus <span class="comment">#主题</span></span><br><span class="line">exclude_generator:</span><br><span class="line">plugins: <span class="comment">#插件，例如生成 RSS 和站点地图的</span></span><br><span class="line">- hexo-generator-feed</span><br><span class="line">- hexo-generator-sitemap</span><br><span class="line"><span class="comment"># Deployment #部署，将 lmintlcx 改成用户名</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: github创库地址.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h3 id="hexo-基本命令"><a href="#hexo-基本命令" class="headerlink" title="hexo 基本命令"></a>hexo 基本命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">常用命令：</span><br><span class="line">hexo <span class="built_in">help</span> <span class="comment">#查看帮助</span></span><br><span class="line">hexo init <span class="comment">#初始化一个目录</span></span><br><span class="line">hexo new <span class="string">"postName"</span> <span class="comment">#新建文章</span></span><br><span class="line">hexo new page <span class="string">"pageName"</span> <span class="comment">#新建页面</span></span><br><span class="line">hexo generate <span class="comment">#生成网页，可以在 public 目录查看整个网站的文件</span></span><br><span class="line">hexo server <span class="comment">#本地预览，'Ctrl+C'关闭</span></span><br><span class="line">hexo deploy <span class="comment">#部署.deploy目录</span></span><br><span class="line">hexo clean <span class="comment">#清除缓存，强烈建议每次执行命令前先清理缓存，每次部署前先删除 .deploy 文件夹</span></span><br><span class="line"></span><br><span class="line">简写：</span><br><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br></pre></td></tr></table></figure><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>在 _posts 目录下会生成文件标题.md<br>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: htt</span><br></pre></td></tr></table></figure><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><h3 id="Others"><a href="#Others" class="headerlink" title="Others:"></a>Others:</h3><p>Github Pages: <a href="https://pages.github.com/" target="_blank" rel="noopener">https://pages.github.com/</a><br>Hexo: <a href="https://hexo.io/zh-cn/docs/writing" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/writing</a><br>MWeb: <a href="https://zh.mweb.im/markdown.html" target="_blank" rel="noopener">https://zh.mweb.im/markdown.html</a></p><p>参考：<a href="https://chars.tech/blog/build-blog-by-hexo/" target="_blank" rel="noopener">https://chars.tech/blog/build-blog-by-hexo/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Common-commands-memo&quot;&gt;&lt;a href=&quot;#Common-commands-memo&quot; class=&quot;headerlink&quot; title=&quot;Common commands memo&quot;&gt;&lt;/a&gt;Common commands memo&lt;/h3&gt;&lt;p&gt;Update.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Other" scheme="http://yoursite.com/categories/Other/"/>
    
    
      <category term="Common commands" scheme="http://yoursite.com/tags/Common-commands/"/>
    
  </entry>
  
</feed>

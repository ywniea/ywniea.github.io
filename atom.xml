<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ywinea&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/ywniea/"/>
  <updated>2019-11-27T17:47:05.777Z</updated>
  <id>https://github.com/ywniea/</id>
  
  <author>
    <name>Ywinea</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React lifecycle</title>
    <link href="https://github.com/ywniea/2018/03/21/React%20lifecycle/"/>
    <id>https://github.com/ywniea/2018/03/21/React%20lifecycle/</id>
    <published>2018-03-21T14:10:32.000Z</published>
    <updated>2019-11-27T17:47:05.777Z</updated>
    
    <content type="html"><![CDATA[<h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><ul><li>当一个class继承任何其他的有constructor的class的时候，在最初的要调用super() super会调用父类的constructor并且做一些初始化的工作。</li><li>这也就是为什么我们只有在调用了super之后才能使用<code>this.props</code></li><li>初始化this.state based on props received、this.xxx</li><li>不要使用 AJAX call等<a id="more"></a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">constructor(props) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    super(props);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    &#x2F;&#x2F; after that </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    this.props.property1...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    &#x2F;&#x2F; on all other place use this.setState(&#123;&#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    this.state &#x3D; &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        ...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    &#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h3 id="deprecated-componentWillMount"><a href="#deprecated-componentWillMount" class="headerlink" title="deprecated-componentWillMount"></a>deprecated-componentWillMount</h3><p>在新的react版本中这个函数被废弃了，尽量避免使用。</p><blockquote><p>题外话：dispatch() 和connect()方法会触发setState()函数的调用。 有人在constructor中调用了某些函数导致路由变化，最终connect(UsersComponent)中的dispatch导致了setState()的调用。<br>Q: The question is, regarding the sample app I posted, what are the two components in question? You said a dispatch() in one component triggers a setState() in another component. In my example, is that App and Users?<br>A: A route change caused dispatch which caused mounting Users which caused another dispatch in its the constructor. So, dispatch inside connect(Users) caused a setState inside connect(App).<br>Q: And why did dispatch() in one component cause a setState() in another? Is that due to a bad coding pattern, or something internal to React?<br>A: Any time you call dispatch(), all connect()-ed component wrappers have their setState() called so that the connected component receive that new state as their props. It’s just how React Redux works.</p></blockquote><ul><li>可以使用this.setState()但是尽量将state的赋值放在constructor中。</li><li>即使是想要调用AJAX或者其他获取数据的方法以达到在最初的render之前就拿到数据的效果，但仍然不能保证数据到达时间可以在最初的render之前。</li><li>而且这个方法可能在最初的render之前调用多次，这个将导致副作用。因此应避免使用AJAX等会导致副作用的方法。</li></ul><h3 id="deprecated-componentWillReceiveProps-nextProps"><a href="#deprecated-componentWillReceiveProps-nextProps" class="headerlink" title="deprecated-componentWillReceiveProps(nextProps)"></a>deprecated-componentWillReceiveProps(nextProps)</h3><ul><li><p>这个方法会在props改变的时候，在每一次update的生命周期中被调用，传进来下一个props的object，包括了props中所有的值，不管这个object中的值有没有被修改。</p></li><li><p>当有state需要根据parent传进来的props进行设置的时候，在这里调用stateState。</p></li><li><p>这个方法在render在掉用之前可能会被调用多次，因此一些有副作用的动作不要在这里调用。例如ajax。</p></li><li><p>使用时记得进行检查某个值是否存在变化。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">componentWillReceiveProps(nextProps) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span>(nextProps.myProp !== <span class="keyword">this</span>.props.myProps) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// nextProps.myProp has a different value than our current prop</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// so we can perform some calculations based on the new value</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h3 id="static-getDerivedStateFromProps-props-state"><a href="#static-getDerivedStateFromProps-props-state" class="headerlink" title="static getDerivedStateFromProps(props, state)"></a>static getDerivedStateFromProps(props, state)</h3><ul><li>生命周期函数 componentWillReceiveProps 是响应 Props 变化之后进行更新的唯一方式。16.3 版本里, 我们介绍了一个替代版的生命周期函数： getDerivedStateFromProps</li><li>getDerivedStateFromProps的存在只有一个目的：让组件在 props 变化时更新 state。</li><li>getDerivedStateFromProps 会在调用 render 方法之前调用，并且在初始挂载及后续更新时都会被调用。它应返回一个对象来更新 state，如果返回 null 则不更新任何内容。</li></ul><h3 id="shouldComponentUpdate-nextProps-nextState-nextContext"><a href="#shouldComponentUpdate-nextProps-nextState-nextContext" class="headerlink" title="shouldComponentUpdate(nextProps, nextState, nextContext)"></a>shouldComponentUpdate(nextProps, nextState, nextContext)</h3><ul><li>如上，接受这三个参数，在update的生命周期中被调用。返回false会阻止re-render，默认返回true。</li><li>用于提升组件性能，但大部分情况请考虑使用内置的 PureComponent 组件，而不是手动编写 shouldComponentUpdate()。PureComponent 会实现shouldComponentUpdate对 props 和 state 进行浅层比较，并减少了跳过必要更新的可能性。</li><li>不要调用setState和有副作有的方法入AJAX</li><li>返回 false 并不会阻止子组件在 state 更改时重新渲染。</li></ul><h3 id="forceUpdate-callback"><a href="#forceUpdate-callback" class="headerlink" title="forceUpdate(callback)"></a>forceUpdate(callback)</h3><ul><li>forceUpdate()将致使组件调用 render() 方法强制让组件重新渲染。</li><li>此操作会跳过该组件的 shouldComponentUpdate()。但其子组件会触发正常的生命周期方法，包括 shouldComponentUpdate() 方法。</li></ul><h3 id="deprecated-—-componentWillUpdate-nextProps-nextState"><a href="#deprecated-—-componentWillUpdate-nextProps-nextState" class="headerlink" title="deprecated — componentWillUpdate(nextProps, nextState)"></a>deprecated — componentWillUpdate(nextProps, nextState)</h3><ul><li>shouldComponentUpdate如果返回true或者是没有被用户实现，进入update的生命周期。这个方法才会被调用。</li><li>用于同步props和state。当state是基于props进行设置的时候，这个方法是best choice。因此如果有需要，建议在这里调用setState。</li><li>同其他的componentWill 的方法一样，这个方法会在render之前被调用多次，因此还是不要进行一些有副作用的方法的调用。如AJAX。</li></ul><p>###render渲染</p><p>render a component</p><h3 id="getSnapshotBeforeUpdate-prevProps-prevState"><a href="#getSnapshotBeforeUpdate-prevProps-prevState" class="headerlink" title="getSnapshotBeforeUpdate(prevProps, prevState)"></a>getSnapshotBeforeUpdate(prevProps, prevState)</h3><ul><li><p>返回值作为componentDidUpdate的第三个参数<br>###componentDidUpdate(prevProps, prevState, snapshot)</p></li><li><p>当一个component渲染之后被调用。在这个方法执行到的时候，可以保证当前组件以及其子组件也全部被渲染完了。</p></li><li><p>由于这个方法可以保证在re-render的生命周期中只调用一次，所以一些有副作用的操作在最好这里被调用。例如ajax。在使用之前最好手动进行比较是否需要进行操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">componentDidUpdate(prevProps) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span>(prevProps.myProps !== <span class="keyword">this</span>.props.myProp) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// this.props.myProp has a different value</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// we can perform any operations that would </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// need the new value and/or cause side-effects </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// like AJAX calls with the new value - this.props.myProp</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li><li><p>因为这个方法在render之后，所以不要进行setState操作，不然会死循环。会触发新一轮的render。</p><ul><li><p>如果想在componentDidUpdate() 中直接调用 setState()，请将它包裹在一个条件语句里。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">    componentDidUpdate(prevProps) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">// 典型用法（不要忘记比较 props）：</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.props.userID !== prevProps.userID) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">this</span>.fetchData(<span class="keyword">this</span>.props.userID);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li></ul></li><li><p>一个例外。当一个component被渲染了之后，他的一些DOM的属性仅能被计算一次，这种情况下可以来修改state。注意要进行手动验证。</p></li></ul><h3 id="static-getDerivedStateFromError-error"><a href="#static-getDerivedStateFromError-error" class="headerlink" title="static getDerivedStateFromError(error)"></a>static getDerivedStateFromError(error)</h3><ul><li>getDerivedStateFromError() 会在渲染阶段调用，因此不能进行有副作用的操作。</li><li>在子组件抛出错误后被调用。 它将抛出的错误作为参数，并返回一个值以更新 state</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> getDerivedStateFromError(error) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 更新 state 使下一次渲染可以显降级 UI</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">hasError</span>: <span class="literal">true</span> &#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h3 id="componentDidCatch-errorString-errorInfo"><a href="#componentDidCatch-errorString-errorInfo" class="headerlink" title="componentDidCatch(errorString, errorInfo)"></a>componentDidCatch(errorString, errorInfo)</h3><ul><li>react16新加的生命周期方法。他作用于子组件的uncaught error。 </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">componentDidCatch(errorString, errorInfo) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">this</span>.setState(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    error: errorString</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  &#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  ErrorLoggingTool.log(errorInfo);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">render() &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.state.error) <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">ShowErrorMessage</span> <span class="attr">error</span>=<span class="string">&#123;this.state.error&#125;</span> /&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="xml">  return (</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="xml">    // render normal component output</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="xml">  );</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="xml">&#125;</span></span></pre></td></tr></table></figure><ul><li>errorString: error.toString()</li><li>errorInfo: 一个object 形如 <code>{componentStack: ...}</code></li></ul><h3 id="componentDidMount"><a href="#componentDidMount" class="headerlink" title="componentDidMount"></a>componentDidMount</h3><ul><li>在整个生命周期中只会被调用一次。他被调用的时候证明当前组件及其子组件都已经被渲染完成。</li><li>在一次生命周期中，因为不会被重复调用好多次，非常建议用于调用任何会导致副作用的函数，例如ajax</li><li>不要调用setState，会导致死循环。</li><li>可以用来创建订阅等。</li></ul><h3 id="componentWillUnmount"><a href="#componentWillUnmount" class="headerlink" title="componentWillUnmount"></a>componentWillUnmount</h3><ul><li>清除一些不再需要的东西，例如setTimeout, setInterval, some listeners</li><li>不要调用setState</li></ul><h3 id="Component-cycles"><a href="#Component-cycles" class="headerlink" title="Component cycles"></a>Component cycles</h3><ul><li><p>component creation</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">componentWillMount()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">render()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">componentDidMount()</span></pre></td></tr></table></figure></li><li><p>更新 Component re-rendering due to re-rendering of the parent component</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">componentWillReceiveProps()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">shouldComponentUpdate()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">componentWillUpdate()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">render()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">componentDidUpdate()</span></pre></td></tr></table></figure></li><li><p>Component re-rendering due to internal change (e.g. a call to this.setState())</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">shouldComponentUpdate()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">componentWillUpdate()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">render()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">componentDidUpdate()</span></pre></td></tr></table></figure></li><li><p>Component re-rendering due to call to this.forceUpdate</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">componentWillUpdate()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">render()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">componentDidUpdate()</span></pre></td></tr></table></figure></li><li><p>Component re-rendering due to catching an error</p></li></ul><p><code>ErrorBoundaries</code> 一个组件可以定义一个特殊层用于处理错误并提供了一个新的生命周期方法<code>componentDidCatch</code>这个方法在发生错误的时候让我们能够更加优雅的处理错误和修复组件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">child error <span class="keyword">throw</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">parent componentDidCatch()</span></pre></td></tr></table></figure><h2 id="新版本"><a href="#新版本" class="headerlink" title="新版本"></a>新版本</h2><h3 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h3><p>当组件实例被创建并插入 DOM 中时，其生命周期调用顺序如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">static getDerivedStateFromProps()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">render()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">componentDidMount()</span></pre></td></tr></table></figure><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p>当组件的 props 或 state 发生变化时会触发更新。组件更新的生命周期调用顺序如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> getDerivedStateFromProps()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">shouldComponentUpdate()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">render()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">getSnapshotBeforeUpdate()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">componentDidUpdate()</span></pre></td></tr></table></figure><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><p>当组件从 DOM 中移除时会调用如下方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">componentWillUnmount()</span></pre></td></tr></table></figure><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p>当渲染过程，生命周期，或子组件的构造函数中抛出错误时，会调用如下方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> getDerivedStateFromError()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">componentDidCatch()</span></pre></td></tr></table></figure><p>参考文章：<br>Understanding React — Component life-cycle: <a href="https://medium.com/@baphemot/understanding-reactjs-component-life-cycle-823a640b3e8d" target="_blank" rel="noopener">https://medium.com/@baphemot/understanding-reactjs-component-life-cycle-823a640b3e8d</a><br><a href="https://zh-hans.reactjs.org/docs/react-component.html" target="_blank" rel="noopener">https://zh-hans.reactjs.org/docs/react-component.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;constructor-NaN&quot;&gt;&lt;a href=&quot;#constructor-NaN&quot; class=&quot;headerlink&quot; title=&quot;constructor&quot;&gt;&lt;/a&gt;constructor&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;当一个class继承任何其他的有constructor的class的时候，在最初的要调用super() super会调用父类的constructor并且做一些初始化的工作。&lt;/li&gt;
&lt;li&gt;这也就是为什么我们只有在调用了super之后才能使用&lt;code&gt;this.props&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;初始化this.state based on props received、this.xxx&lt;/li&gt;
&lt;li&gt;不要使用 AJAX call等
    
    </summary>
    
    
      <category term="React" scheme="https://github.com/ywniea/categories/React/"/>
    
    
      <category term="React lifecycle" scheme="https://github.com/ywniea/tags/React-lifecycle/"/>
    
  </entry>
  
  <entry>
    <title>Hexo &amp; Github Pages &amp; bash</title>
    <link href="https://github.com/ywniea/2018/01/29/Hexo%20&amp;%20Github%20Pages%20&amp;%20bash/"/>
    <id>https://github.com/ywniea/2018/01/29/Hexo%20&amp;%20Github%20Pages%20&amp;%20bash/</id>
    <published>2018-01-29T10:02:50.000Z</published>
    <updated>2019-11-27T06:58:57.084Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Common-commands-memo"><a href="#Common-commands-memo" class="headerlink" title="Common commands memo"></a>Common commands memo</h3><p>Update.</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">// some kinds of permission denied</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">sudo chown -R ownerName: /usr/<span class="built_in">local</span>/lib/node_modules</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">// use a taobao registry instead the official one</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">cnpm install hexo-renderer-scss --save</span></pre></td></tr></table></figure><h3 id="Hexo-Theme"><a href="#Hexo-Theme" class="headerlink" title="Hexo Theme"></a>Hexo Theme</h3><p>even <a href="https://github.com/ahonn/hexo-theme-even/wiki" target="_blank" rel="noopener">https://github.com/ahonn/hexo-theme-even/wiki</a><br><a href="https://github.com/ahonn/hexo-theme-even" target="_blank" rel="noopener">https://github.com/ahonn/hexo-theme-even</a></p><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ sudo npm install hexo-cli -g</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建hexo文件夹</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">$ mkdir hexo</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入hexo文件夹</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> hexo</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化hexo</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">$ hexo init</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装依赖包</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">$ npm install</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本地查看</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先运行下面的命令，再在浏览器输入localhost:4000即可</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">$ hexo server</span></pre></td></tr></table></figure><h3 id="生成静态网站"><a href="#生成静态网站" class="headerlink" title="生成静态网站"></a>生成静态网站</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo generate</span></pre></td></tr></table></figure><h3 id="目录配置"><a href="#目录配置" class="headerlink" title="目录配置"></a>目录配置</h3><p>配置文件的冒号“:”后面有一个空格</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">├── .deploy <span class="comment">#需要部署的文件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">├── node_modules <span class="comment">#Hexo插件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">├── public <span class="comment">#生成的静态网页文件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">├── scaffolds <span class="comment">#模板</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">├── <span class="built_in">source</span> <span class="comment">#博客正文和其他源文件，404、favicon、CNAME 都应该放在这里</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">| ├── _drafts <span class="comment">#草稿</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">| └── _posts <span class="comment">#文章</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">├── themes <span class="comment">#主题</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">├── _config.yml <span class="comment">#全局配置文件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">└── package.json</span></pre></td></tr></table></figure><h3 id="全局配置-config-yml"><a href="#全局配置-config-yml" class="headerlink" title="全局配置 _config.yml"></a>全局配置 _config.yml</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment">## Docs: http://hexo.io/docs/configuration.html</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site #站点信息</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">title:  <span class="comment">#标题</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">subtitle:  <span class="comment">#副标题</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">description:  <span class="comment">#站点描述，给搜索引擎看的</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">author:  <span class="comment">#作者</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">email:  <span class="comment">#电子邮箱</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">language: zh-CN <span class="comment">#语言</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL #链接格式</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">url:  <span class="comment">#网址</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">root: / <span class="comment">#根目录</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">permalink: :year/:month/:day/:title/ <span class="comment">#文章的链接格式</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">tag_dir: tags <span class="comment">#标签目录</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">archive_dir: archives <span class="comment">#存档目录</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">category_dir: categories <span class="comment">#分类目录</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">code_dir: downloads/code</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">permalink_defaults:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Directory #目录</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">source_dir: <span class="built_in">source</span> <span class="comment">#源文件目录</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">public_dir: public <span class="comment">#生成的网页文件目录</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Writing #写作</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">new_post_name: :title.md <span class="comment">#新文章标题</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">default_layout: post <span class="comment">#默认的模板，包括 post、page、photo、draft（文章、页面、照片、草稿）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">titlecase: <span class="literal">false</span> <span class="comment">#标题转换成大写</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">external_link: <span class="literal">true</span> <span class="comment">#在新选项卡中打开连接</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">filename_case: 0</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">render_drafts: <span class="literal">false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">post_asset_folder: <span class="literal">false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">relative_link: <span class="literal">false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">highlight: <span class="comment">#语法高亮</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span> <span class="comment">#是否启用</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">  line_number: <span class="literal">true</span> <span class="comment">#显示行号</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">  tab_replace:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Category &amp; Tag #分类和标签</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">default_category: uncategorized <span class="comment">#默认分类</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">category_map:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">tag_map:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Archives</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">2: 开启分页</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">1: 禁用分页</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">0: 全部禁用</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">archive: 2</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">category: 2</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">tag: 2</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Server #本地服务器</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">port: 4000 <span class="comment">#端口号</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">server_ip: localhost <span class="comment">#IP 地址</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">logger: <span class="literal">false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">logger_format: dev</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Date / Time format #日期时间格式</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line">date_format: YYYY-MM-DD <span class="comment">#参考http://momentjs.com/docs/#/displaying/format/</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line">time_format: H:mm:ss</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Pagination #分页</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line">per_page: 10 <span class="comment">#每页文章数，设置成 0 禁用分页</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line">pagination_dir: page</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Disqus #Disqus评论，替换为多说</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line">disqus_shortname:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">60</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions #拓展插件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">61</span></pre></td><td class="code"><pre><span class="line">theme: landscape-plus <span class="comment">#主题</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">62</span></pre></td><td class="code"><pre><span class="line">exclude_generator:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">63</span></pre></td><td class="code"><pre><span class="line">plugins: <span class="comment">#插件，例如生成 RSS 和站点地图的</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">64</span></pre></td><td class="code"><pre><span class="line">- hexo-generator-feed</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">65</span></pre></td><td class="code"><pre><span class="line">- hexo-generator-sitemap</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">66</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment #部署，将 lmintlcx 改成用户名</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">67</span></pre></td><td class="code"><pre><span class="line">deploy:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">68</span></pre></td><td class="code"><pre><span class="line">  <span class="built_in">type</span>: git</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">69</span></pre></td><td class="code"><pre><span class="line">  repo: github创库地址.git</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">70</span></pre></td><td class="code"><pre><span class="line">  branch: master</span></pre></td></tr></table></figure><h3 id="hexo-基本命令"><a href="#hexo-基本命令" class="headerlink" title="hexo 基本命令"></a>hexo 基本命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">常用命令：</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">hexo <span class="built_in">help</span> <span class="comment">#查看帮助</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">hexo init <span class="comment">#初始化一个目录</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">"postName"</span> <span class="comment">#新建文章</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">hexo new page <span class="string">"pageName"</span> <span class="comment">#新建页面</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">hexo generate <span class="comment">#生成网页，可以在 public 目录查看整个网站的文件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">hexo server <span class="comment">#本地预览，'Ctrl+C'关闭</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">hexo deploy <span class="comment">#部署.deploy目录</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">hexo clean <span class="comment">#清除缓存，强烈建议每次执行命令前先清理缓存，每次部署前先删除 .deploy 文件夹</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">简写：</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">hexo n == hexo new</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">hexo g == hexo generate</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">hexo s == hexo server</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">hexo d == hexo deploy</span></pre></td></tr></table></figure><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span></pre></td></tr></table></figure><p>在 _posts 目录下会生成文件标题.md<br>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo server</span></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo generate</span></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">deploy:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="built_in">type</span>: git</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  repository: htt</span></pre></td></tr></table></figure><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><h3 id="Others"><a href="#Others" class="headerlink" title="Others:"></a>Others:</h3><p>Github Pages: <a href="https://pages.github.com/" target="_blank" rel="noopener">https://pages.github.com/</a><br>Hexo: <a href="https://hexo.io/zh-cn/docs/writing" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/writing</a><br>MWeb: <a href="https://zh.mweb.im/markdown.html" target="_blank" rel="noopener">https://zh.mweb.im/markdown.html</a></p><p>参考：<a href="https://chars.tech/blog/build-blog-by-hexo/" target="_blank" rel="noopener">https://chars.tech/blog/build-blog-by-hexo/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Common-commands-memo&quot;&gt;&lt;a href=&quot;#Common-commands-memo&quot; class=&quot;headerlink&quot; title=&quot;Common commands memo&quot;&gt;&lt;/a&gt;Common commands memo&lt;/h3&gt;&lt;p&gt;Update.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Other" scheme="https://github.com/ywniea/categories/Other/"/>
    
    
      <category term="Other" scheme="https://github.com/ywniea/tags/Other/"/>
    
  </entry>
  
</feed>

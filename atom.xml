<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-11-26T04:46:53.163Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Weiyan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React lifecycle</title>
    <link href="http://yoursite.com/2019/11/26/React%20lifecycle/"/>
    <id>http://yoursite.com/2019/11/26/React%20lifecycle/</id>
    <published>2019-11-26T03:33:23.042Z</published>
    <updated>2019-11-26T04:46:53.163Z</updated>
    
    <content type="html"><![CDATA[<h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><ul><li><p>当一个class继承任何其他的有constructor的class的时候，在最初的要调用super() super会调用父类的constructor并且做一些初始化的工作。</p></li><li><p>这也就是为什么我们只有在调用了super之后才能使用<code>this.props</code></p></li><li><p>初始化this.state based on props received、this.xxx</p></li><li><p>不要使用 AJAX call等</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="comment">// after that </span></span><br><span class="line">    <span class="keyword">this</span>.props.property1...</span><br><span class="line">    <span class="comment">// on all other place use this.setState(&#123;&#125;);</span></span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="deprecated-componentWillMount"><a href="#deprecated-componentWillMount" class="headerlink" title="deprecated-componentWillMount"></a>deprecated-componentWillMount</h3><p>在新的react版本中这个函数被废弃了，尽量避免使用。</p><p>题外话：dispatch() 和connect()方法会触发setState()函数的调用。 有人在constructor中调用了某些函数导致路由变化，最终connect(UsersComponent)中的dispatch导致了setState()的调用。</p><blockquote><p>Q: The question is, regarding the sample app I posted, what are the two components in question? You said a dispatch() in one component triggers a setState() in another component. In my example, is that App and Users?</p></blockquote><blockquote><p>A: A route change caused dispatch which caused mounting Users which caused another dispatch in its the constructor. So, dispatch inside connect(Users) caused a setState inside connect(App).</p></blockquote><blockquote><p>Q: And why did dispatch() in one component cause a setState() in another? Is that due to a bad coding pattern, or something internal to React?</p></blockquote><blockquote><p>A: Any time you call dispatch(), all connect()-ed component wrappers have their setState() called so that the connected component receive that new state as their props. It’s just how React Redux works.</p></blockquote><p>但是讲清楚：</p><ul><li>可以使用this.setState()但是尽量将state的赋值放在constructor中。</li><li>即使是想要调用AJAX或者其他获取数据的方法以达到在最初的render之前就拿到数据的效果，但仍然不能保证数据到达时间可以在最初的render之前。</li><li>而且这个方法可能在最初的render之前调用多次，这个将导致副作用。因此应避免使用AJAX等会导致副作用的方法。</li></ul><h3 id="deprecated-componentWillReceiveProps-nextProps"><a href="#deprecated-componentWillReceiveProps-nextProps" class="headerlink" title="deprecated-componentWillReceiveProps(nextProps)"></a>deprecated-componentWillReceiveProps(nextProps)</h3><ul><li><p>这个方法会在props改变的时候，在每一次update的生命周期中被调用，传进来下一个props的object，包括了props中所有的值，不管这个object中的值有没有被修改。</p></li><li><p>当有state需要根据parent传进来的props进行设置的时候，在这里调用stateState。</p></li><li><p>这个方法在render在掉用之前可能会被调用多次，因此一些有副作用的动作不要在这里调用。例如ajax。</p></li><li><p>使用时记得进行检查某个值是否存在变化。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">componentWillReceiveProps(nextProps) &#123;</span><br><span class="line">  <span class="keyword">if</span>(nextProps.myProp !== <span class="keyword">this</span>.props.myProps) &#123;</span><br><span class="line">    <span class="comment">// nextProps.myProp has a different value than our current prop</span></span><br><span class="line">    <span class="comment">// so we can perform some calculations based on the new value</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="shouldComponentUpdate-nextProps-nextState-nextContext"><a href="#shouldComponentUpdate-nextProps-nextState-nextContext" class="headerlink" title="shouldComponentUpdate(nextProps, nextState, nextContext)"></a>shouldComponentUpdate(nextProps, nextState, nextContext)</h3><ul><li>如上，接受这三个参数，在update的生命周期中被调用。返回false会阻止re-render，默认返回true。</li><li>用于提升组件性能</li><li>不要调用setState和有副作有的方法入AJAX</li></ul><h3 id="deprecated-—-componentWillUpdate-nextProps-nextState"><a href="#deprecated-—-componentWillUpdate-nextProps-nextState" class="headerlink" title="deprecated — componentWillUpdate(nextProps, nextState)"></a>deprecated — componentWillUpdate(nextProps, nextState)</h3><ul><li>shouldComponentUpdate如果返回true或者是没有被用户实现，进入update的生命周期。这个方法才会被调用。</li><li>用于同步props和state。当state是基于props进行设置的时候，这个方法是best choice。因此如果有需要，建议在这里调用setState。</li><li>同其他的componentWill 的方法一样，这个方法会在render之前被调用多次，因此还是不要进行一些有副作用的方法的调用。如AJAX。</li></ul><p>###render渲染</p><p>render a component</p><p>###componentDidUpdate(prevProps, prevState, prevContext)</p><ul><li><p>当一个component渲染之后被调用。在这个方法执行到的时候，可以保证当前组件以及其子组件也全部被渲染完了。</p></li><li><p>由于这个方法可以保证在re-render的生命周期中只调用一次，所以一些有副作用的操作在最好这里被调用。例如ajax。在使用之前最好手动进行比较是否需要进行操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">componentDidUpdate(prevProps) &#123;</span><br><span class="line">  <span class="keyword">if</span>(prevProps.myProps !== <span class="keyword">this</span>.props.myProp) &#123;</span><br><span class="line">    <span class="comment">// this.props.myProp has a different value</span></span><br><span class="line">    <span class="comment">// we can perform any operations that would </span></span><br><span class="line">    <span class="comment">// need the new value and/or cause side-effects </span></span><br><span class="line">    <span class="comment">// like AJAX calls with the new value - this.props.myProp</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>因为这个方法在render之后，所以不要进行setState操作，不然会死循环。会触发新一轮的render。</p></li><li><p>一个例外。当一个component被渲染了之后，他的一些DOM的属性仅能被计算一次，这种情况下可以来修改state。注意要进行手动验证。</p></li></ul><h3 id="componentDidCatch-errorString-errorInfo"><a href="#componentDidCatch-errorString-errorInfo" class="headerlink" title="componentDidCatch(errorString, errorInfo)"></a>componentDidCatch(errorString, errorInfo)</h3><ul><li>react16新加的生命周期方法。他作用于子组件的uncaught error。 </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">componentDidCatch(errorString, errorInfo) &#123;</span><br><span class="line">  <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">    error: errorString</span><br><span class="line">  &#125;);</span><br><span class="line">  ErrorLoggingTool.log(errorInfo);</span><br><span class="line">&#125;</span><br><span class="line">render() &#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.state.error) <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">ShowErrorMessage</span> <span class="attr">error</span>=<span class="string">&#123;this.state.error&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  return (</span></span><br><span class="line"><span class="xml">    // render normal component output</span></span><br><span class="line"><span class="xml">  );</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>errorString: error.toString()</li><li>errorInfo: 一个object 形如 <code>{componentStack: ...}</code></li></ul><h3 id="componentDidMount"><a href="#componentDidMount" class="headerlink" title="componentDidMount"></a>componentDidMount</h3><ul><li>在整个生命周期中只会被调用一次。他被调用的时候证明当前组件及其子组件都已经被渲染完成。</li><li>在一次生命周期中，因为不会被重复调用好多次，非常建议用于调用任何会导致副作用的函数，例如ajax</li><li>不要调用setState，会导致死循环。</li><li>一个例外。当一个component被渲染了之后，他的一些DOM的属性仅能被计算一次，这种情况下可以来修改state。</li></ul><h3 id="componentWillUnmount"><a href="#componentWillUnmount" class="headerlink" title="componentWillUnmount"></a>componentWillUnmount</h3><ul><li>清除一些不再需要的东西，例如setTimeout, setInterval, some listeners<a href="media/15737146153227/React%20lifecycle.md">React lifecycle</a></li><li>不要调用setState</li></ul><h3 id="Component-cycles"><a href="#Component-cycles" class="headerlink" title="Component cycles"></a>Component cycles</h3><ul><li>component creation</li></ul><p><img src="../images/15740513820273.jpg" alt=""></p><ul><li>Component re-rendering due to re-rendering of the parent component<br><img src="../images/15740514478209.jpg" alt=""></li><li>Component re-rendering due to internal change (e.g. a call to this.setState())<br><img src="../images/15740514981665.jpg" alt=""></li><li>Component re-rendering due to call to this.forceUpdate</li></ul><p><img src="../images/15740515279013.jpg" alt=""></p><ul><li>Component re-rendering due to catching an error</li></ul><p><code>ErrorBoundaries</code> 一个组件可以定义一个特殊层用于处理错误并提供了一个新的生命周期方法<code>componentDidCatch</code>这个方法在发生错误的时候让我们能够更加优雅的处理错误和修复组件。<br><img src="../images/15740517773124.jpg" alt=""></p><p>(<a href="https://medium.com/@baphemot/understanding-reactjs-component-life-cycle-823a640b3e8d" target="_blank" rel="noopener">https://medium.com/@baphemot/understanding-reactjs-component-life-cycle-823a640b3e8d</a>)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;constructor-NaN&quot;&gt;&lt;a href=&quot;#constructor-NaN&quot; class=&quot;headerlink&quot; title=&quot;constructor&quot;&gt;&lt;/a&gt;constructor&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;当一个class继承任何其他的有c
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>hello-world</title>
    <link href="http://yoursite.com/2019/11/26/hello-world/"/>
    <id>http://yoursite.com/2019/11/26/hello-world/</id>
    <published>2019-11-26T02:38:37.822Z</published>
    <updated>2019-11-26T04:36:45.707Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><h3 id="Others"><a href="#Others" class="headerlink" title="Others:"></a>Others:</h3><p><a href="https://zh.mweb.im/markdown.html" target="_blank" rel="noopener">https://zh.mweb.im/markdown.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
